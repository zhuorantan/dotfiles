# cat << EOF > /dev/null

# -- general -------------------------------------------------------------------

set -g default-terminal "tmux-256color" # colors!
set -ga terminal-overrides ",xterm-256color*:Tc"

set -s escape-time 10                     # faster command sequences
set -s focus-events on

# remap prefix from 'C-b' to 'C-a'
unbind C-b
set-option -g prefix C-a
bind-key C-a send-prefix

set -g history-limit 20000                 # boost history

# edit configuration
bind e new-window -n '~/.tmux.conf' "sh -c '\${EDITOR:-nvim} ~/.tmux.conf && tmux source ~/.tmux.conf && tmux display \"~/.tmux.conf sourced\"'"

# reload configuration
bind r source-file ~/.tmux.conf \; display '~/.tmux.conf sourced'

# start with mouse mode enabled
set -g mouse on

# enable vi mode for copy
setw -g mode-keys vi

# emacs key bindings in tmux command prompt (prefix + :) are better than
# vi keys, even for vim users
set -g status-keys emacs


# -- display -------------------------------------------------------------------

set -g base-index 1           # start windows numbering at 1
setw -g pane-base-index 1     # make pane numbering consistent with windows

set -g automatic-rename on   # rename window to reflect current program
set -g renumber-windows on    # renumber windows when a window is closed

set -g set-titles on          # set terminal title
set -g set-titles-string '#h ❐ #S ● #I #W'

# status format
setw -g window-status-format "#I #W#{?window_bell_flag,🔔,}#{?window_zoomed_flag,🔍,}"
setw -g window-status-current-format " #I #W#{?window_zoomed_flag,🔍,} "

set -g display-panes-time 800 # slightly longer pane indicators display time
set -g display-time 1000      # slightly longer status messages display time

set -g status-interval 10     # redraw status line every 10 seconds

# clear both screen and history
bind -n C-l send-keys C-l \; run 'sleep 0.1' \; clear-history

# activity
set -g monitor-activity on
set -g visual-activity off


# -- navigation ----------------------------------------------------------------

# create session
bind C-c new-session

# split current window horizontally
bind s split-window -v -c "#{pane_current_path}"
# split current window vertically
bind v split-window -h -c "#{pane_current_path}"
unbind '"'
unbind %

# pane navigation
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

bind > swap-pane -D       # swap current pane with the next one
bind < swap-pane -U       # swap current pane with the previous one


# maximize current pane
bind + run 'cut -c3- ~/.tmux.conf | sh -s _maximize_pane "#{session_name}" #D'


# pane resizing
bind -r H resize-pane -L 2
bind -r J resize-pane -D 2
bind -r K resize-pane -U 2
bind -r L resize-pane -R 2

# window navigation
unbind n
unbind p
bind -r C-h previous-window # select previous window
bind -r C-l next-window     # select next window
bind Tab last-window        # move to last active window

# toggle mouse
bind m run "cut -c3- ~/.tmux.conf | sh -s _toggle_mouse"

# Fast switching projects
bind o display-popup -E 'cut -c3- ~/.tmux.conf | zsh -s _open_project --project ~/Documents/org --project ~/Documents/dotfiles --directory ~/Workspace'
bind O display-popup -E 'cut -c3- ~/.tmux.conf | zsh -s _open_project --replace --project ~/Documents/org --project ~/Documents/dotfiles --directory ~/Workspace'


# -- copy mode -----------------------------------------------------------------

bind Enter copy-mode # enter copy mode

if -b 'command -v pbcopy > /dev/null 2>&1' copy_command='pbcopy'
if -b 'command -v xsel > /dev/null 2>&1' copy_command='xsel -i -b'

bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi C-v send -X rectangle-toggle
bind -T copy-mode-vi y send -X copy-pipe \'${copy_command}\' \; send -X clear-selection
bind -T copy-mode-vi Escape send -X cancel

bind -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe \'${copy_command}\' \; send -X clear-selection


# -- buffers -------------------------------------------------------------------

bind b list-buffers  # list paste buffers
bind p paste-buffer  # paste from the top paste buffer
bind P choose-buffer # choose which buffer to paste from


# -- theme ---------------------------------------------------------------------

# status right
status_prefix="#{?client_prefix,⌨ ,}"
status_pairing="#{?session_many_attached,👓 ,}"
status_synchoronized="#{?pane_synchronized,🔒 ,}"

status_widgets="${status_prefix}${status_pairing}${status_synchoronized}"

# copied from https://github.com/odedlaz/tmux-onedark-theme

onedark_black="#282c34"
onedark_blue="#61afef"
onedark_yellow="#e5c07b"
onedark_red="#e06c75"
onedark_white="#aab2bf"
onedark_green="#98c379"
onedark_visual_grey="#3e4452"
onedark_comment_grey="#5c6370"

set -g status-left-length "100"
set -g status-right-length "100"

set -g message-style fg=$onedark_white,bg=$onedark_black
set -g message-command-style fg=$onedark_white,bg=$onedark_black

setw -g window-status-style fg=$onedark_black,bg=$onedark_black
setw -g window-status-activity-style fg=$onedark_black,bg=$onedark_black

setw -g window-status-separator ""

set -g window-style fg=$onedark_comment_grey,bg=$onedark_black
set -g window-active-style fg=$onedark_white,bg=$onedark_black

set -g pane-border-style fg=$onedark_white,bg=$onedark_black
set -g pane-active-border-style fg=$onedark_blue,bg=$onedark_black

set -g display-panes-active-colour "$onedark_yellow"
set -g display-panes-colour "$onedark_blue"

set -g status-bg "$onedark_black"
set -g status-fg "$onedark_white"

time_format="%R"
date_format="%b %d"

set -g status-left "#[fg=$onedark_black,bg=$onedark_green,bold] #S #[fg=$onedark_green,bg=$onedark_black,nobold,nounderscore,noitalics]"
set -g status-right "#[fg=$onedark_white,bg=$onedark_black,nounderscore,noitalics]${time_format}  ${date_format} #[fg=$onedark_visual_grey,bg=$onedark_black]#[fg=$onedark_visual_grey,bg=$onedark_visual_grey]#[fg=$onedark_white, bg=$onedark_visual_grey]${status_widgets} #[fg=$onedark_green,bg=$onedark_visual_grey,nobold,nounderscore,noitalics]#[fg=$onedark_black,bg=$onedark_green,bold] #h #[fg=$onedark_yellow, bg=$onedark_green]#[fg=$onedark_red,bg=$onedark_yellow]"

set -g window-status-format "#[fg=$onedark_black,bg=$onedark_black,nobold,nounderscore,noitalics]#[fg=$onedark_white,bg=$onedark_black] #I  #W #[fg=$onedark_black,bg=$onedark_black,nobold,nounderscore,noitalics]"
set -g window-status-current-format "#[fg=$onedark_black,bg=$onedark_visual_grey,nobold,nounderscore,noitalics]#[fg=$onedark_white,bg=$onedark_visual_grey,nobold] #I  #W #[fg=$onedark_visual_grey,bg=$onedark_black,nobold,nounderscore,noitalics]"


# EOF
#
# # exit the script if any statement returns a non-true return value
# set -e
#
# unset GREP_OPTIONS
# export LC_NUMERIC=C
#
# if ! printf '' | sed -E 's///' 2>/dev/null; then
#   if printf '' | sed -r 's///' 2>/dev/null; then
#     sed () {
#       n=$#; while [ "$n" -gt 0 ]; do arg=$1; shift; case $arg in -E*) arg=-r${arg#-E};; esac; set -- "$@" "$arg"; n=$(( n - 1 )); done
#       command sed "$@"
#     }
#   fi
# fi
#
# __newline='
# '
#
# _maximize_pane() {
#   current_session=${1:-$(tmux display -p '#{session_name}')}
#   current_pane=${2:-$(tmux display -p '#{pane_id}')}
#
#   dead_panes=$(tmux list-panes -s -t "$current_session" -F '#{pane_dead} #{pane_id} #{pane_start_command}' | grep -E -o '^1 %.+maximized.+$' || true)
#   restore=$(echo "$dead_panes" | sed -n -E -e "s/^1 $current_pane .+maximized.+'(%[0-9]+)'$/tmux swap-pane -s \1 -t $current_pane \; kill-pane -t $current_pane/p" -e "s/^1 (%[0-9]+) .+maximized.+'$current_pane'$/tmux swap-pane -s \1 -t $current_pane \; kill-pane -t \1/p" )
#
#   if [ -z "$restore" ]; then
#     [ "$(tmux list-panes -t "$current_session:" | wc -l | sed 's/^ *//g')" -eq 1 ] && tmux display "Can't maximize with only one pane" && return
#     window=$(tmux new-window -t "$current_session:" -P "exec maximized... 2> /dev/null & tmux setw -t \"$current_session:\" remain-on-exit on; printf \"Pane has been maximized, press <prefix>+ to restore. %s\" '$current_pane'")
#     window=${window%.*}
#
#     retry=10
#     while [ x"$(tmux list-panes -t "$window" -F '#{session_name}:#{window_index} #{pane_dead}' 2>/dev/null)" != x"$window 1" ] && [ "$retry" -ne 0 ]; do
#       sleep 0.05
#       retry=$((retry - 1))
#     done
#     if [ "$retry" -eq 0 ]; then
#       tmux display 'Unable to maximize pane'
#     fi
#
#     new_pane=$(tmux display -t "$window" -p '#{pane_id}')
#     tmux setw -t "$window" remain-on-exit off \; swap-pane -s "$current_pane" -t "$new_pane"
#   else
#     $restore || tmux kill-pane
#   fi
# }
#
# _toggle_mouse() {
#   old=$(tmux show -gv mouse)
#   new=""
#
#   if [ "$old" = "on" ]; then
#     new="off"
#   else
#     new="on"
#   fi
#
#   tmux set -g mouse $new \;\
#        display "mouse: $new"
# }
# 
# _open_project() {
#   PROJECTS=()
#   
#   while [[ $# -gt 0 ]]; do
#     case $1 in
#       -p|--project)
#         if [[ ! -e "$2" ]]; then
#           echo "File $2 not exists"
#           exit 1
#         fi
#         PROJECTS+=("$(readlink -f "$2")")
#         shift
#         shift
#         ;;
#       -d|--directory)
#         if [[ ! -d "$2" ]]; then
#           echo "Directory $2 not exists"
#           exit 1
#         fi
#         PROJECTS+=("$2"/*)
#         shift
#         shift
#         ;;
#       --replace)
#         REPLACE=true
#         shift
#         ;;
#       *)
#         echo "Unknown option $1" >&2
#         exit 1
#         ;;
#     esac
#   done
#
#   if [[ -f ~/.z ]]; then
#     NOW="$(date +%s)"
#     typeset -A FRECENTS
#     while read LINE; do
#       IFS="|" read DIR RANK TIME <<< "$LINE"
#       FRECENT=$((10000 * $RANK * (3.75 / (0.0001 * ($NOW - $TIME) + 1.25))))
#       FRECENTS["$DIR"]=$FRECENT
#     done < ~/.z
#   fi
#
#   RANKED_PROJECTS=$(for i in "${PROJECTS[@]}"; do FRECENT=${FRECENTS["$i"]-0}; echo "$FRECENT\t$i"; done)
#   IFS=$'\n' SORTED_PROJECTS=($(sort -t '\t' -k 1 -g -r <<< "${RANKED_PROJECTS[*]}"))
#
#   PROJECT_WITH_NAMES=$(for i in "${SORTED_PROJECTS[@]}"; do DIR=$(echo "$i" | cut -f2); echo "$(basename "$DIR")\t$DIR"; done)
#   
#   NAME_AND_DIR=$(printf "%s\n" "${PROJECT_WITH_NAMES[@]}" | fzf --with-nth 1 --delimiter='\t' --preview 'ls {2}')
#   IFS=$'\t' read PROJECT_NAME PROJECT_DIR <<< "$NAME_AND_DIR"
#
#   OPEN_NVIM="nvim '+terminal' '+lua require(\"fzf-lua\").files()'" 
#   if [[ -z "$REPLACE" ]]; then
#     tmux new-window -S -n "$PROJECT_NAME" -c "$PROJECT_DIR" "$OPEN_NVIM"
#   else
#     SESSION_NAME=$(tmux display-message -p '#S')
#     tmux rename-window "$PROJECT_NAME"
#     tmux new-window -k -n "$PROJECT_NAME" -c "$PROJECT_DIR" -t "$SESSION_NAME:$PROJECT_NAME" "$OPEN_NVIM"
#   fi
# }
#
# "$@"
